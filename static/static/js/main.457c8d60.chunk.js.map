{"version":3,"sources":["SongList/index.js","App.js","reportWebVitals.js","index.js"],"names":["SongList","useState","songs","setSongs","useEffect","axios","get","then","res","data","catch","err","console","log","List","map","song","ListItem","ListItemText","fields","name","ListItemSecondaryAction","IconButton","onClick","pk","App","className","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUA+Be,SAASA,IACvB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAPAC,qBAAU,WACTC,IACEC,IAAI,mCACJC,MAAK,SAACC,GAAD,OAASL,EAASK,EAAIC,SAC3BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC3B,IAGF,gCACC,2CACA,cAACG,EAAA,EAAD,UACEZ,EAAMa,KAAI,SAAAC,GAAI,OACd,eAACC,EAAA,EAAD,WACC,cAACC,EAAA,EAAD,UACEF,EAAKG,OAAOC,OAEd,cAACC,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,CAAYC,QAAS,WACpBlB,IAAMC,IAAN,qCAAwCU,EAAKQ,GAA7C,WADD,SAGC,cAAC,IAAD,UARYR,EAAKQ,YChCVC,MAVf,WACC,OACC,qBAAKC,UAAU,MAAf,SACC,cAACC,EAAA,EAAD,UACC,cAAC3B,EAAD,SCIW4B,EAZS,SAAAC,GACnBA,GAAeA,aAAuBC,UACzC,8BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDXO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBZ,M","file":"static/js/main.457c8d60.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { IconButton, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport axios from 'axios';\n\n\n// const songs = [\n//     {\n//         id: 1,\n//         name: 'Test Song',\n//         artist: 'Zed',\n//         song: [\n//             { notes: ['F5', 'F6'], delay: 1 },\n//             { notes: ['F5'], delay: 1 },\n//             { notes: ['F6'], delay: .5 },\n//             { notes: ['F5'], delay: 1 },\n//         ]\n//     }\n// ]\n\n// TODO:\n// show all info, including approximate length?\n// Load config info on a per-song basis, but from the database instead of the song's string format\n// Add buttons to play once and play on repeat for a given amount of time\n\n\n// Down the road:\n// Allow for songs to be queued for different time slots\n// Maybe make the songs play differently based on different data? i.e. weather, stuff like that.\n//   Could affect speed or velocity (if that even works)\n\nexport default function SongList() {\n\tconst [songs, setSongs] = useState([]);\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get('http://127.0.0.1:8000/all_songs')\n\t\t\t.then((res) => setSongs(res.data))\n\t\t\t.catch((err) => console.log(err));\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>All songs</h2>\n\t\t\t<List>\n\t\t\t\t{songs.map(song => (\n\t\t\t\t\t<ListItem key={song.pk}>\n\t\t\t\t\t\t<ListItemText>\n\t\t\t\t\t\t\t{song.fields.name}\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t\t<ListItemSecondaryAction>\n\t\t\t\t\t\t\t<IconButton onClick={() => {\n\t\t\t\t\t\t\t\taxios.get(`http://127.0.0.1:8000/song/${song.pk}/play`)\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<PlayCircleOutlineIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</ListItemSecondaryAction>\n\t\t\t\t\t</ListItem>\n\t\t\t\t))}\n\t\t\t</List>\n\t\t</div>\n\t)\n}","import { Container } from '@material-ui/core';\nimport './App.css';\nimport SongList from './SongList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Container>\n\t\t\t\t<SongList />\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}